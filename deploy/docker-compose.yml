version: '3'

name: posts-analyser

services:
  frontend:
    image: ${FRONTEND_CONTAINER_IMAGE}
    container_name: ${FRONTEND_CONTAINER_NAME}
    depends_on:
      - gateway
    restart: always
    env_file:
      - microservices_defaults/frontend.env
    environment:
      - PLACEHOLDER
    ports:
      - ${FRONTEND_PORT}:443

  gateway:
    image: ${GATEWAY_SERVICE_CONTAINER_IMAGE}
    container_name: ${GATEWAY_SERVICE_CONTAINER_NAME}
    restart: always
    env_file:
      - microservices_defaults/gateway.env
    environment:
      - PLACEHOLDER
    command: >
      flask 
        --app gateway/app.py
        --debug
        run
        --host=0.0.0.0
        --port="${GATEWAY_SERVICE_PORT}"
    ports:
      - ${GATEWAY_SERVICE_PORT:?err}:${GATEWAY_SERVICE_PORT}

  db:
    image: ${DB_CONTAINER_IMAGE}
    container_name: ${DB_CONTAINER_NAME}
    healthcheck:
      test: [ "CMD", "pg_isready", "-q", "-d", "${APP_DB_NAME}", "-U", "${POSTGRES_USER}" ]
      timeout: 45s
      interval: 10s
      retries: 10
    restart: always
    environment:
      - POSTGRES_USER
      - POSTGRES_PASSWORD
      - APP_DB_USER
      - APP_DB_PASS
      - APP_DB_NAME
    volumes:
      - ./postgres:/docker-entrypoint-initdb.d/
      - posts-analyser-db-volume:/var/lib/postgresql/data

  db_controller_service:
    image: ${DB_CONTROLLER_SERVICE_CONTAINER_IMAGE}
    container_name: ${DB_CONTROLLER_SERVICE_CONTAINER_NAME}
    restart: always
    entrypoint: db-controller-service
    env_file:
      - microservices_defaults/db-controller.env
    environment:
      - APP_DB_USER
      - APP_DB_PASS
      - APP_DB_NAME
      - PASSWD_MIN_LENGTH
      - PASSWD_MAX_LENGTH
      - PASSWD_UPPERCASE
      - PASSWD_NUMBERS
      - PASSWD_SPECIAL
      - FILE_LOG_DIR

    ## Temporary for development reasons
    ports:
      - ${DB_CONTROLLER_SERVICE_PORT:?err}:${DB_CONTROLLER_SERVICE_PORT}
      - 61052:61052
    ## TODO
    depends_on:
      db:
        condition: service_healthy

    links:
      - db

    volumes:
      - ./log:${FILE_LOG_DIR:?err}

  ml:
    image: ${ML_SERVICE_CONTAINER_IMAGE}
    container_name: ${ML_SERVICE_CONTAINER_NAME}
    healthcheck:
      test: [ "CMD", "curl", "http://${ML_SERVICE_HOST}:${ML_SERVICE_PORT}/healthcheck" ]
      timeout: 20s
      interval: 60s
      retries: 5
      start_period: 20s
    env_file:
      - microservices_defaults/ml.env
    entrypoint: [
      "waitress-serve",
      "--host",
      "${ML_SERVICE_HOST}",
      "--port",
      "${ML_SERVICE_PORT}",
      "--call",
      "posts_sentiment_analyser:create_app"]
    environment:
      - ML_SERVICE_HOST
      - ML_SERVICE_PORT
    ## Temporary for development reasons
    ports:
      - ${ML_SERVICE_PORT}:${ML_SERVICE_PORT}

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./prometheus:/etc/prometheus
      - prometheus-data:/prometheus
    restart: unless-stopped
    command:
      - "--config.file=/etc/prometheus/prometheus.yml"

  grafana:
    image: grafana/grafana-oss:latest
    container_name: grafana
    user: "0"
    environment:
      - GF_AUTH_DISABLE_LOGIN_FORM=true
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
      - GF_SECURITY_ALLOW_EMBEDDING=true
    ports:
      - "3000:3000"
    volumes:
      - grafana-data:/var/lib/grafana
      # automatically configure the loki datasource
      - ./monitoring/grafana/provisioning/:/etc/grafana/provisioning/
      - ./monitoring/grafana/dashboard_configs/:/etc/dashboards/
    restart: unless-stopped

  cadvisor:
    image: gcr.io/cadvisor/cadvisor:v0.45.0     
    container_name: cadvisor
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /dev/disk/:/dev/disk:ro
    devices:
      - /dev/kmsg
    restart: unless-stopped
    privileged: true

  loki:
    image: grafana/loki:2.6.1
    ports:
      - "3100"
    volumes:
      - loki-data:/loki


  promtail:
    image: grafana/promtail:2.6.1
    volumes:
      # custom config will read logs from the containers of
      # this project
      - ./monitoring/promtail-config.yaml:/etc/promtail/config.yml
      # to read container labels and logs
      - /var/run/docker.sock:/var/run/docker.sock
      - /var/lib/docker/containers:/var/lib/docker/containers

volumes:
  posts-analyser-db-volume:
    labels:
      - "Posts Analyser Database Volume"
    driver: local

  prometheus-data:
    labels:
      - "Posts Analyser Prometheus Data Volume"
    driver: local

  grafana-data:
    labels:
      - "Posts Analyser Grafana Data Volume"
    driver: local

  loki-data:
    labels:
      - "Posts Analyser Loki Data Volume"
    driver: local